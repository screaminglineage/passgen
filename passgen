#!/usr/bin/env python

import random
import argparse

# Default values
WORD_COUNT = 4              # Number of words in passphrase
PASSWORD_LENGTH = 20        # Number of characters in password
SEPARATOR = '-'             # Passphrase separator

IS_CAPITAL = False          # Whether first letters are capitalized
NO_UPPER = True          
NO_LOWER = True          
NO_DIGIT = True          
ALLOW_SPECIAL = False          

FILES_PATH = "files/"       # File Paths

# List of Words to use
WORDS_FILE = "words.txt"
# Uncomment the line below to use a much larger of collection of words for generation
# Note that most of the words in the file are either uncommon or sometimes acronyms
#WORDS_FILE = "words_big.txt"

def gen_upper():
    '''Generates a Random Uppercase Letter'''
    return chr(random.randint(65, 90))
            
def gen_lower():
    '''Generates a Random Lowercase Letter'''
    return chr(random.randint(97, 122))

def gen_digit():
    '''Generates a Random Digit'''
    return chr(random.randint(48, 57))

def gen_special():
    '''Generates a Random Special Letter'''
    return chr(random.randint(33, 47))


def gen_password(length, allow_upper, allow_lower, allow_digit, allow_special):
    """Generates a random password"""
    password = ""
    while len(password) < length:
        choice = random.randint(1, 4)

        if choice == 1 and allow_upper:
            password += gen_upper()
        elif choice == 2 and allow_lower:
            password += gen_lower()
        elif choice == 3 and allow_digit:
            password += gen_digit()
        elif choice == 4 and allow_special:
            password += gen_special()
    return password


def gen_passphrase(filepath, word_count, separator, is_capital):
    '''Generates a list of random words from a file and then performs the
    required operations (adding capitalization and/or separator)'''
    
    with open(filepath, 'r') as words_file:
        words_list = words_file.readlines()

    # Generating random words
    passphrase_words = []
    while len(passphrase_words) < word_count:
        num = random.randint(0, (len(words_list) - 1))
        passphrase_words.append(words_list[num].strip())

    # Capitalizing first letter of each word is specified
    # Also makes all words starting with a capital letter lowercase 
    # if no capitalize option specified
    for i, word in enumerate(passphrase_words):
        if word[0][0].isupper() and is_capital is False:
            passphrase_words[i] = word.lower()
        elif is_capital is True:
            passphrase_words[i] = word.capitalize() 
    
    passphrase = separator.join(passphrase_words)
    return passphrase


# Argparser get command line options
def get_args():
    # Print "DEFAULT: On/Off" in help text
    default_is_capital = "On" if IS_CAPITAL else "Off"
    default_no_upper = "On" if NO_UPPER else "Off"
    default_no_lower = "On" if NO_LOWER else "Off"
    default_no_digit = "On" if NO_DIGIT else "Off"
    default_allow_special = "On" if ALLOW_SPECIAL else "Off"

    # Gets Comand Line Arguments
    parser = argparse.ArgumentParser(description='Generate a password or a passphrase')    
    subparsers = parser.add_subparsers(title='modes available', dest="mode")  
    
    # Global Options
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='display more text as output')

   
    # Passphrase Options
    phrase = subparsers.add_parser('phrase', help='generate a passphrase', 
                                description='Generates a random series of words separated by a character')
    
    phrase.add_argument('-w', '--word-count', type=int, default = WORD_COUNT,
                        help=f'specify the number of words [DEFAULT: {WORD_COUNT}]')

    phrase.add_argument('-S', '--separator', type=str, default = SEPARATOR,
                        help=f'character to separate each word [DEFAULT: "{SEPARATOR}"]')

    phrase.add_argument('-c', '--capitalize', action='store_true', default = IS_CAPITAL,
                        help=f'capitalize the first character of each word [DEFAULT: {default_is_capital}]')

    
    # Password Options 
    word = subparsers.add_parser('word', help='generate a password')
    word.add_argument('-l', '--length', type=int, default = PASSWORD_LENGTH,
                        help=f'specify the length of the password [DEFAULT: {PASSWORD_LENGTH}]')

    word.add_argument('-nu', '--no-uppercase', action='store_false', default = NO_UPPER,
                        help=f'dont allow uppercase characters in the password [DEFAULT: {default_no_upper}]')

    word.add_argument('-nl', '--no-lowercase', action='store_false', default = NO_LOWER,
                        help=f'dont allow lowercase characters in the password [DEFAULT: {default_no_lower}]')

    word.add_argument('-nd', '--no-digits', action='store_false', default = NO_DIGIT,
                        help=f'dont allow digits in the password [DEFAULT: {default_no_digit}]')

    word.add_argument('-s', '--special-chars', action='store_true', default = ALLOW_SPECIAL,
                        help=f'allow special characters in the password [DEFAULT: {default_allow_special}]')

    args = parser.parse_args()
    return args


def main(args):
    # Passphrase 
    if args.mode == "phrase":
        output = gen_passphrase(f"{FILES_PATH}{WORDS_FILE}", args.word_count,
                            args.separator, args.capitalize)
    # Password
    elif args.mode == "word":
        # Checks if all have been set to False
        if False == args.no_uppercase == args.no_lowercase == args.no_digits \
                 == args.special_chars:
            print("Error! No possible password for this configuration. All possible options disabled")
            exit(1)

        output = gen_password(args.length, args.no_uppercase,
                args.no_lowercase, args.no_digits, args.special_chars)
    # Displays only the passphrase if quiet mode is turned on
    if args.verbose:
        print('Generated Passphrase:', output)
    else:
        print(output)
main(get_args())


