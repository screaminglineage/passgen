#!/usr/bin/env python

from core.pass_generators import *
from core.defaults import *

import argparse



# Argparser get command line options
def get_args():
    # Gets Comand Line Arguments
    parser = argparse.ArgumentParser(description='Generate a password or a passphrase')    
    subparsers = parser.add_subparsers(title='modes available', dest="mode",
                                    description='to see help for the modes try "passgen phrase -h" or "passgen word -h"')
                 
    # Passphrase Options
    phrase = subparsers.add_parser('phrase', help='generate a passphrase', 
                                description='Generates a random series of words separated by a character')
    
    phrase.add_argument('-w', '--word-count', type=int, default = WORD_COUNT,
                        help=f'specify the number of words [DEFAULT: {WORD_COUNT}]')

    phrase.add_argument('-S', '--separator', type=str, default = SEPARATOR,
                        help=f'character to separate each word [DEFAULT: "{SEPARATOR}"]')

    phrase.add_argument('-c', '--capitalize', action='store_true', default = IS_CAPITAL,
                        help=f'capitalize the first character of each word [DEFAULT: {default_is_capital}]')

    
    # Password Options 
    word = subparsers.add_parser('word', help='generate a password')
    word.add_argument('-l', '--length', type=int, default = PASSWORD_LENGTH,
                        help=f'specify the length of the password [DEFAULT: {PASSWORD_LENGTH}]')

    word.add_argument('-nu', '--no-uppercase', action='store_false', default = NO_UPPER,
                        help=f'dont allow uppercase characters in the password [DEFAULT: {default_no_upper}]')

    word.add_argument('-nl', '--no-lowercase', action='store_false', default = NO_LOWER,
                        help=f'dont allow lowercase characters in the password [DEFAULT: {default_no_lower}]')

    word.add_argument('-nd', '--no-digits', action='store_false', default = NO_DIGIT,
                        help=f'dont allow digits in the password [DEFAULT: {default_no_digit}]')

    word.add_argument('-s', '--special-chars', action='store_true', default = NO_SPECIAL,
                        help=f'allow special characters in the password [DEFAULT: {default_allow_special}]')

    args = parser.parse_args()
    return args



def main(args):
    # Passphrase 
    if args.mode == "phrase":
        output = gen_passphrase(f"{FILES_PATH}{WORDS_FILE}", args.word_count,
                                args.separator, args.capitalize)
    # Password
    elif args.mode == "word":
        # Checks if all have been set to False
        if False == args.no_uppercase == args.no_lowercase == args.no_digits \
                 == args.special_chars:
            print("Error! No possible password for this configuration. All possible options disabled")
            exit(1)

        output =  gen_password(args.length, args.no_uppercase, args.no_lowercase,
                               args.no_digits, args.special_chars)
    return output

print(main(get_args()))


