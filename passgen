#!/usr/bin/env python

import random
import argparse

# Default values
LENGTH = 4                  # Number of words in passcode
SEPARATOR = '-'             # Passcode separator

IS_CAPITAL = False          # Whether first letters are capitalized
ALLOW_UPPER = True          
ALLOW_LOWER = True          
ALLOW_DIGIT = True          
ALLOW_SPECIAL = False          

FILES_PATH = "files/"       # File Paths

# List of Words to use
WORDS_FILE = "words.txt"
# Uncomment the line below to use a much larger of collection of words for generation
# Note that most of the words in the file are either uncommon or sometimes acronyms
#WORDS_FILE = "words_big.txt"

def gen_upper():
    '''Generates a Random Uppercase Letter'''
    return chr(random.randint(65, 90))
            
def gen_lower():
    '''Generates a Random Lowercase Letter'''
    return chr(random.randint(97, 122))

def gen_digit():
    '''Generates a Random Digit'''
    return chr(random.randint(48, 57))

def gen_special():
    '''Generates a Random Special Letter'''
    return chr(random.randint(33, 47))


def gen_password(length, allow_upper, allow_lower, allow_digit, allow_special):
    password = ""
    while len(password) < length:
        choice = random.randint(1, 4)

        if choice == 1 and allow_upper:
            password += gen_upper()

        if choice == 2 and allow_lower:
            password += gen_lower()

        if choice == 3 and allow_digit:
            password += gen_digit()

        if choice == 4 and allow_special:
            password += gen_special()
    return password


def gen_passcode(filepath, length, separator, is_capital):
    '''Generates a list of random words from a file and then performs the
    required operations (adding capitalization and/or separator)'''
    
    with open(filepath, 'r') as words_file:
        words_list = words_file.readlines()

    # Generating random words
    passcode_words = []
    while len(passcode_words) < length:
        num = random.randint(0, (len(words_list) - 1))
        passcode_words.append(words_list[num].strip())

    # Capitalizing first letter of each word
    if is_capital:
        for i, word in enumerate(passcode_words):
            passcode_words[i] = passcode_words[i].capitalize() 
    passcode = separator.join(passcode_words)
    return passcode


# Argparser get command line options
def get_args():
    # Print "DEFAULT: On/Off" in help text
    default_is_capital = "On" if IS_CAPITAL else "Off"
    default_allow_upper = "On" if ALLOW_UPPER else "Off"
    default_allow_lower = "On" if ALLOW_LOWER else "Off"
    default_allow_digit = "On" if ALLOW_DIGIT else "Off"
    default_allow_special = "On" if ALLOW_SPECIAL else "Off"

    parser = argparse.ArgumentParser(description='Generate a random series of words separated by a character')

    # Gets Comand Line Arguments
    parser.add_argument('mode', nargs='?', choices=('word', 'code'),
                        help='generate a passcode')

    parser.add_argument('-v', '--verbose', action='store_true',
                        help='display more text as output')

    parser.add_argument('length', type=int, nargs='?', default = LENGTH,
                        help=f'specify the number of words (DEFAULT: {LENGTH})')

    parser.add_argument('-S', '--separator', type=str, default = SEPARATOR,
                        help=f'character to separate each word (DEFAULT: "{SEPARATOR}")')

    parser.add_argument('-c', '--capitalize', action='store_true', default = IS_CAPITAL,
                        help=f'capitalize the first character of each word (DEFAULT: {default_is_capital}))')

    parser.add_argument('-u', '--allow-uppercase', action='store_false', default = ALLOW_UPPER,
                        help=f'dont allow uppercase characters in the password (DEFAULT: {default_allow_upper}))')

    parser.add_argument('-l', '--allow-lowercase', action='store_false', default = ALLOW_LOWER,
                        help=f'dont allow lowercase characters in the password (DEFAULT: {default_allow_lower}))')

    parser.add_argument('-d', '--allow-digits', action='store_false', default = ALLOW_DIGIT,
                        help=f'allow digits in the password (DEFAULT: {default_allow_digit}))')

    parser.add_argument('-s', '--allow-special', action='store_true', default = ALLOW_SPECIAL,
                        help=f'allow special characters in the password (DEFAULT: {default_allow_special}))')

    args = parser.parse_args()
    return args


def main(args):
    if args.mode == "code":
        output = gen_passcode(f"{FILES_PATH}{WORDS_FILE}", args.length,
                            args.separator, args.capitalize)
    else:
        print("No argument given, defaulting to password")
        output = gen_password(args.length, args.allow_uppercase,
                args.allow_lowercase, args.allow_digits, args.allow_special)
    # Displays only the passcode if quiet mode is turned on
    if args.verbose:
        print('Generated Passcode:', output)
    else:
        print(output)
main(get_args())


